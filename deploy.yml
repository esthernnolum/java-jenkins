# This playbook is responsible for deploying installer artifacts to their respective locations.

  # Jenkins job includes parameters which replaces the variable e.g "host", "instance", "artifact" etc
---

- hosts: '{{ host }}'
  strategy: free
  serial: 10
  become_method: runas
  gather_facts: false
  
  vars:
    app_name: '{{ instance }}'
    linux_backup_path: '/data/{{ instance }}/backup'
    linux_deployment_path: '/data/{{ instance }}'
    linux_source_path: '/var/jenkins_home/workspace/{{ jenkins_job }}/target'

  tasks:
  - name: 2 >>> new variable with current date time
    set_fact: temp="{{lookup('pipe','date \"+%Y-%m-%d_TIME:%H:%M\"')}}"
    
  - name: 3 >>> print variable
    debug: msg="Current date and time is {{temp}}"

  - name: 5 >>> get file stat to be able to perform a check in the following task
    stat:
      path: '{{ linux_backup_path }}'
    register: result 

  - debug: var=result

  - set_fact: mydate="{{lookup('pipe','date +%Y-%m-%d_%H-%M-%S')}}"
  - debug: var=mydate
 
  - name: Create backup directory if it doesn't exist
    file:
      path: '{{ linux__backup_path }}'
      state: directory
    ignore_errors: yes
  
  #Get services info
  - name: check if a service is installed
    service:
      name: '{{ service }}'
    register: service_info

  # Stop services before backup and deployment
  - name: Stop a service
    service:
      name: '{{ service }}'
      state: stopped

  - name: Backup the existing artifact build
    copy:
      src: '{{ linux_deployment_path }}/{{ current_component }}.jar'
      dest: '{{ linux_backup_path }}/{{ current_component }}.jar__{{ mydate }}'
      remote_src: True
    ignore_errors: yes
    when: result.stat.exists == true

  - name: Remove a build, if present
    file:
      path: '{{ linux_deployment_path }}/{{ current_component }}.jar'
      state: absent 

  - name: Deploy the artifact to the deployment folder
    copy:
      src: '{{ linux_source_path }}/{{ current_component }}.jar'
      dest: '{{ linux_deployment_path }}/{{ current_component }}.jar'

  - name: Confirm the build is deployed
    wait_for:
      path: '{{ linux_spring_deployment_path }}/{{ current_component }}.jar'
      timeout: 120
    poll: 1

  #Start services after backup and deployment
  - name: Start a service
    service:
      name: '{{ service }}'
      state: started
